// lib/repositories/nextGenDamage.repository.ts
import { createClient } from "../supabase/server"; // path to your server.ts (adjust import)

/** Your provided type (id/created_at are generated by DB) */
export type NextGenDamage = {
  description: string | null;
  category: string | null;
  image_id: string | null;
  image_public_url: string | null;
  estimation: number | null;         // numeric
  vector: number[] | null;           // Supabase "vector" column
  case_status: string | null;
  similar_cases: string[] | null;    // _uuid[]
};

/** Row returned after insert (at least the id) */
export type NextGenDamageInserted = {
  id: string; // uuid from DB
};

const TABLE = "nest-gen-damage";
const SCHEMA = "public";

export class CaseRepository {
  static async insert(data: NextGenDamage): Promise<NextGenDamageInserted> {
    const supabase = await createClient();

    // If you prefer: supabase.from(`${SCHEMA}.${TABLE}`)
    const { data: inserted, error } = await supabase
      .from(`${TABLE}`)
      .insert([data])
      .select("id")
      .single();

    if (error) {
      // Surface a clean error for the caller
      throw new Error(`Failed to store damage record: ${error.message}`);
    }

    return { id: inserted.id as string };
  }
}
